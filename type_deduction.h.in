#ifndef JSON_DESERIALISER_@LIB_ID@_TYPE_DEDUCTION_HEADER
#define JSON_DESERIALISER_@LIB_ID@_TYPE_DEDUCTION_HEADER

#include <cstddef>

namespace JsonDeserialise::@LIB_ID@_ {

    template <typename Any, bool isArray, int size, typename TypeInArray, int isNullable,
              typename TypeInNullable, int isString>
    struct _Deserialisable;

    template <typename Any, bool isArray = false, int size = -1, typename TypeInArray = void,
              int isNullable = -1, typename TypeInNullable = void, int isString = -1>
    using _DeserialisableType =
        typename _Deserialisable<Any, isArray, size, TypeInArray, isNullable, TypeInNullable,
                                 isString>::Type;

    template <typename Any>
    struct Deserialisable {
        using Type = _DeserialisableType<Any>;
    };

    template <auto member_offset, typename = decltype(member_offset)>
    struct Customised;
    
    template <typename ObjectType, typename T, auto member_offset>
    struct Customised<member_offset, T ObjectType::*> {
        using Type = typename Deserialisable<T>::Type;
    };

    template <typename Container, typename T, std::size_t limit>
    struct LimitedArrayInfo {
        using ArrayType = Container;
        using TypeInArray = T;
        using Type = _DeserialisableType<Container, true, limit, T>;
    };

    template <typename Container, typename T>
    struct ArrayTypeInfo {
        using ArrayType = Container;
        using TypeInArray = T;
        using Type = _DeserialisableType<Container, true, -1, T>;
    };

} // namespace JsonDeserialise::@LIB_ID@_

#endif // JSON_DESERIALISER_@LIB_ID@_TYPE_DEDUCTION_HEADER